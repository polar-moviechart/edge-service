name: Commit Stage
on: push # 새 코드를 저장소로 푸쉬하면 워크플로를 시작한다.

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: polar-moviechart/edge-service
  VERSION: ${{ github.sha }}

jobs:
  build:
    name: Build and Test
    runs-on: ubuntu-22.04 # 깃허브가 제겅하는 우분투 러너에서 실행
    permissions: # 작업에 부여된 권한
      contents: read
      security-events: write # 깃허브에 보안 이벤트를 제출할 수 있는 권한
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4 # 현재 깃 저장소를 체크아웃한다.
      - name: Set up JDK
        uses: actions/setup-java@v4 # 자바 런타임을 설치하고 설정한다.
        with:
          distribution: temurin
          java-version: 17
          cache: gradle
      - name: Build, unit tests and integration tests
        # 윈도우 호환성을 해결하면서 그래들 래퍼스크립트를 실행 가능하게 만든다.
        # 코드베이스를 컴파일하고 단위 및 통합 테스트를 실행하는 그래들 빌드 작업을 수행한다.
        # 1. 로컬 데이터베이스로 테스트 진행 -> 성공 -> 깃 액션에서 실패
        # 2. 테스트컨테이너 & 플라이웨이로 테스트 진행 -> 테스트가 끝나지 않음
        # => 깃 액션에서 테스트 검증 x
        run: |
          chmod +x gradlew
          ./gradlew clean build -Dspring.profiles.active=test

  package:
    name: Package and Publish
    if: ${{ github.ref == 'refs/heads/main' }} # 잡을 main 브랜치에 대해서만 실행한다.
    needs: [ build ] # "build" job이 성공적으로 수행된 경우에만 이 잡을 실행한다.
    runs-on: ubuntu-22.04 # ubuntu22.04에서 잡을 실행
    permissions:
      contents: read # 현재 깃 저장소를 체크아웃하기 위한 권한
      packages: write # 깃허브 컨테이너 저장소로 이미지를 업로드하기 위한 권한
      security-events: write # 깃허브로 보안 이벤트를 제출하기 위한 권한
    steps:
#      - name: Validate Kubernetes manifests
#        uses: stefanprodan/kube-tools@v1 # 쿠버네티스를 위한 유용한 도구를 설치할 수 있는 액션
#        with:
#          kubectl: 1.24.3 # 쿠버네티스 CLI를 설치한다.
#          kubeval: 0.16.1
#          command: |
#            kubeval --strict -d k8s
      - name: Checkout source code
        uses: actions/checkout@v4 # 현재 깃 저장소(catalog-service)를 체크아웃한다.
      - name: Set up JDK
        uses: actions/setup-java@v4 # 자바 런타임을 설치하고 설정한다.
        with:
          distribution: temurin
          java-version: 17
          cache: gradle

      - name: Build container image
        # 컨테이너 이미지를 빌드하고 릴리스 후보를 위한 이름을 정의하기 위해 스프링 부트의 빌드팩 통합을 사용한다.
        run: |
          chmod +x gradlew 
          ./gradlew bootBuildImage \
            --imageName ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.VERSION }}

      - name: OCI image vulnerability scanning
        uses: anchore/scan-action@v3
        id: scan
        with:
          image:
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.VERSION }}
          fail-build: false # 이미지에서 취약점이 발견돼도 빌드를 실패로 만들지 않는다.args:
          severity-cutoff: high

      - name: Log into container registry
        uses: docker/login-action@v3 # 깃허브 컨테이너 저장소와 인증한다.
        with:
          registry: ${{ env.REGISTRY }} # 저장소 정보는 환경 변수로 정의된다.
          username: ${{ github.actor }} # 깃허브 액션이 제공하는 현재 사용자의 깃허브 유저명
          password:  ${{ secrets.GITHUB_TOKEN }} # 저장소와 인증하기 위해 필요한 토큰. 깃허브 액션이 제공한다.

      - name: Publish container image # 릴리스 후보를 저장소로 푸시한다.
        run: docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.VERSION }}
      - name: Publish container image (latest)
        run: |
          docker tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{env.VERSION }} \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
